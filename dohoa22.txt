


#include <windows.h>  // for MS Windows

#include <GL/glut.h>  // GLUT, include glu.h and gl.h

#include <GL/gl.h>
#include <GL/glu.h>

#include <GL/freeglut.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include<iostream>
using namespace std;

// test cam
GLfloat camx = 5.0, camy = 0.0, camz = 5.0;

static GLfloat spin = 0.0; /* góc quay hiện tại của hình chữ nhật */

// camera attributes
float viewerPosition[3] = { 0.0, 0.0, -20.0 };
float viewerDirection[3] = { 0.0, 0.0, 0.0 };
float viewerUp[3] = { 0.0, 1.0, 0.0 };

// rotation values for the navigation
float navigationRotation[3] = { 0.0, 0.0, 0.0 };
int mousePressedX = 0, mousePressedY = 0;
float lastXOffset = 0.0, lastYOffset = 0.0, lastZOffset = 0.0;
// mouse button states
int leftMouseButtonActive = 0, middleMouseButtonActive = 0, rightMouseButtonActive = 0;

// hàm loadtexture thủ công
GLuint loadimage(const char* fileName)
{
    FILE* file;
    unsigned char header[54], * data;
    unsigned int dataPos, size, width, height;
#pragma warning(disable:4996)
    file = fopen(fileName, "rb");
    fread(header, 1, 54, file);
    dataPos = *(int*)&(header[0x0A]);
    size = *(int*)&(header[0x22]);
    width = *(int*)&(header[0x12]);
    height = *(int*)&(header[0x16]);
    if (size == NULL)
        size = width * height * 3;
    if (dataPos == NULL)
        dataPos = 54;
    data = new unsigned char[size];
    fread(data, 1, size, file);
    fclose(file);
    GLuint texture;
    glGenTextures(1, &texture);
    glBindTexture(GL_TEXTURE_2D, texture);

    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_BGR_EXT, GL_UNSIGNED_BYTE, data);
    return texture;
}



GLfloat ctrlpoints1[14][3] = {
        { 2.0, 9.5, 0.25},
        { 1.75, 10.0, -1},
        {1.75, 9.75, -1.25},
        {1.75, 9.5, -1.5},
        {1.75, 9.0, -1.75},
        {1.75, 8., -2},
        {1.75, 7, -2.25},
        {1.75, 6, -2.3},
        {1.75, 5, -2.},
        {1.75, 4, -1.5},
        {1.75, 3, -1.},
        {1.75, 2, -0.5},
        {1.5, 1.75, -0.25},
        {1., 1.25, -0.0}
};
GLfloat ctrlpoints4[14][3] = {
         { 1, 9, 0.25},
         { 0.75, 9.75, -1},
         {0.75, 9.75, -1.2},
         {0.75, 9.5, -1.45},
         {0.75, 9.0, -1.7},
         {0.75, 8., -1.95},
         {0.75, 7, -2.2},
        {0.75, 6, -2.25},
        {0.75, 5, -1.95},
        {0.75, 3, -1.45},
        {0.75, 2, -0.95},
        {0.5, 1.75, -0.45},
        {0.25, 1.75, -0.2},
        {0.25, 1.75, -0.0}
};
void veQuaicap() {
    glBegin(GL_QUADS);
    glColor3f(0.59, 0.81, 1.28); // red x
    glVertex3fv(&ctrlpoints1[0][0]);
    glVertex3fv(&ctrlpoints1[0][3]);
    glVertex3fv(&ctrlpoints4[0][3]);
    glVertex3fv(&ctrlpoints4[0][0]);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.59, 0.81, 1.28); // red x
    glVertex3fv(&ctrlpoints1[0][3]);
    glVertex3fv(&ctrlpoints1[1][3]);
    glVertex3fv(&ctrlpoints4[1][3]);
    glVertex3fv(&ctrlpoints4[0][3]);
    glEnd();

    for (int i = 1; i < 12; i++) {
        glBegin(GL_QUADS);
        glColor3f(0.59, 0.81, 1.28); // red x
        glVertex3fv(&ctrlpoints1[i][3]);
        glVertex3fv(&ctrlpoints1[i + 1][3]);
        glVertex3fv(&ctrlpoints4[i + 1][3]);
        glVertex3fv(&ctrlpoints4[i][3]);
        glEnd();
    }
}
GLint lol;
GLint mattruoc;
GLint logotruoc;
GLint mattruoctren;
GLint khoacap;
GLint mattruoctrai;
GLint khoa1;
GLint khoa2;
GLint mauden;
GLint chanban;
GLint nennha;
GLint matban;
void init() {
//    lol = loadimage("tuong.bmp");
    mattruoc = loadimage("mattruoc.bmp");
    logotruoc = loadimage("logotruoc.bmp");
    mattruoctren = loadimage("mattruoctren.bmp");
    khoacap = loadimage("test1.bmp");
    mattruoctrai = loadimage("mattruoctrai.bmp");
    khoa1 = loadimage("khoa1.bmp");
    khoa2 = loadimage("khoa2.bmp");
    mauden = loadimage("mauden.bmp");
    chanban = loadimage("changhe.bmp");
    nennha = loadimage("nennha.bmp");
    matban = loadimage("matban.bmp");
    glClearColor(0, 0, 0, 0);
    //glMap1f(GL_MAP1_VERTEX_3,0,1.0,3,4, &controlPoints[0][0]);
    //glEnable(GL_MAP1_VERTEX_3);
    glEnable(GL_DEPTH_TEST);
    glShadeModel(GL_FLAT);
    /*glMap1f(GL_MAP1_VERTEX_3, 0.0, 1.0, 3, 6, &ctrlpoints2[0][0]);
    glEnable(GL_MAP1_VERTEX_3);*/
}
void veMatCong(int dong, GLfloat ctrlpoints3[][3]) {
    int i;
    glMap1f(GL_MAP1_VERTEX_3, 0.0, 1.0, 3, dong, &ctrlpoints3[0][0]);
    glEnable(GL_MAP1_VERTEX_3);
    //glClear(GL_COLOR_BUFFER_BIT);
    //glColor3f(1.0, 1.0, 1.0);
    glBegin(GL_LINE_STRIP);
    for (i = 0; i <= 30; i++)
        glEvalCoord1f((GLfloat)i / 30.0);
    glEnd();
    /* The following code displays the control points as dots. */
    glPointSize(5.0);
    glColor3f(1.0, 1.0, 0.0);
    glBegin(GL_POINTS);
    for (i = 0; i < dong; i++)
        glVertex3fv(&ctrlpoints3[i][0]);
    glEnd();
}

void DrawCoordinate()
{
    //glDisable(GL_LIGHTING);
    glBegin(GL_LINES);
    glColor3f(1.0, 0.0, 0.0); // red x
    glVertex3f(-20.0, 0.0, 0.0);
    glVertex3f(20.0, 0.0, 0.0);
    glEnd();

    glBegin(GL_LINES);
    glColor3f(0.0, 1.0, 0.0); // green y
    glVertex3f(0.0, -20.0, 0.0);
    glVertex3f(0.0, 20.0, 0.0);
    glEnd();

    glBegin(GL_LINES);
    glColor3f(0.0, 0.0, 1.0); // blue z
    glVertex3f(0.0, 0.0, -20.0);
    glVertex3f(0.0, 0.0, 20.0);
    glEnd();

    //glEnable(GL_LIGHTING);
}
void veCaiban() {
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, matban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0 - 0.01, 8);    glTexCoord2f(0, 0);
    glVertex3f(8, 0 - 0.01, -8);   glTexCoord2f(1, 0);
    glVertex3f(-3, 0 - 0.01, -8);  glTexCoord2f(1, 1);
    glVertex3f(-3, 0 - 0.01, 8);   glTexCoord2f(0, 1);
    glEnd();
    //glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0, 8);    glTexCoord2f(0, 0);
    glVertex3f(7, 0, 8);    glTexCoord2f(1, 0);
    glVertex3f(7, -7, 8);   glTexCoord2f(1, 1);
    glVertex3f(8, -7, 8);   glTexCoord2f(0, 1);
    glEnd();
    //glDisable(GL_TEXTURE_2D);

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0, 8);    glTexCoord2f(0, 0);
    glVertex3f(8, 0, 7);    glTexCoord2f(1, 0);
    glVertex3f(8, -7, 7);   glTexCoord2f(1, 1);
    glVertex3f(8, -7, 8);   glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0, -8);   glTexCoord2f(0, 0);
    glVertex3f(8, -7, -8);  glTexCoord2f(1, 0);
    glVertex3f(7, -7, -8);  glTexCoord2f(1, 1);
    glVertex3f(7, 0, -8);   glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0, -8);   glTexCoord2f(0, 0);
    glVertex3f(8, 0, -7);   glTexCoord2f(1, 0);
    glVertex3f(8, -7, -7);  glTexCoord2f(1, 1);
    glVertex3f(8, -7, -8);  glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(-3, 0, -8);  glTexCoord2f(0, 0);
    glVertex3f(-2, 0, -8);  glTexCoord2f(1, 0);
    glVertex3f(-2, -7, -8); glTexCoord2f(1, 1);
    glVertex3f(-3, -7, -8); glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(-3, 0, -8);  glTexCoord2f(0, 0);
    glVertex3f(-3, -7, -8); glTexCoord2f(1, 0);
    glVertex3f(-3, -7, -7); glTexCoord2f(1, 1);
    glVertex3f(-3, 0, -7);  glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(-3, 0, 8);   glTexCoord2f(0, 0);
    glVertex3f(-3, 0, 7);   glTexCoord2f(1, 0);
    glVertex3f(-3, -7, 7);  glTexCoord2f(1, 1);
    glVertex3f(-3, -7, 8);  glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(-3, 0, 8);   glTexCoord2f(0, 0);
    glVertex3f(-3, -7, 8);  glTexCoord2f(1, 0);
    glVertex3f(-2, -7, 8);  glTexCoord2f(1, 1);
    glVertex3f(-2, 0, 8);   glTexCoord2f(0, 1);
    glEnd();

    /*glBegin(GL_QUADS);
    glVertex3f(8, 0, 8);
    glVertex3f(8, 0, -8);
    glVertex3f(-3, 0, -8);
    glVertex3f(-3, 0, 8);
    glEnd();*/

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0, 8);    glTexCoord2f(0, 0);
    glVertex3f(7, 0, 8);    glTexCoord2f(1, 0);
    glVertex3f(7, -7, 8);   glTexCoord2f(1, 1);
    glVertex3f(8, -7, 8);   glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0, 8);    glTexCoord2f(0, 0);
    glVertex3f(8, 0, 7);    glTexCoord2f(1, 0);
    glVertex3f(8, -7, 7);   glTexCoord2f(1, 1);
    glVertex3f(8, -7, 8);   glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0, -8);   glTexCoord2f(0, 0);
    glVertex3f(8, -7, -8);  glTexCoord2f(1, 0);
    glVertex3f(7, -7, -8);  glTexCoord2f(1, 1);
    glVertex3f(7, 0, -8);   glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(8, 0, -8);   glTexCoord2f(0, 0);
    glVertex3f(8, 0, -7);   glTexCoord2f(1, 0);
    glVertex3f(8, -7, -7);  glTexCoord2f(1, 1);
    glVertex3f(8, -7, -8);  glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(-3, 0, -8);  glTexCoord2f(0, 0);
    glVertex3f(-2, 0, -8);  glTexCoord2f(1, 0);
    glVertex3f(-2, -7, -8); glTexCoord2f(1, 1);
    glVertex3f(-3, -7, -8); glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(-3, 0, -8);  glTexCoord2f(0, 0);
    glVertex3f(-3, -7, -8); glTexCoord2f(1, 0);
    glVertex3f(-3, -7, -7); glTexCoord2f(1, 1);
    glVertex3f(-3, 0, -7);  glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(-3, 0, 8);   glTexCoord2f(0, 0);
    glVertex3f(-3, 0, 7);   glTexCoord2f(1, 0);
    glVertex3f(-3, -7, 7);  glTexCoord2f(1, 1);
    glVertex3f(-3, -7, 8);  glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, chanban);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(-3, 0, 8);   glTexCoord2f(0, 0);
    glVertex3f(-3, -7, 8);  glTexCoord2f(1, 0);
    glVertex3f(-2, -7, 8);  glTexCoord2f(1, 1);
    glVertex3f(-2, 0, 8);   glTexCoord2f(0, 1);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, nennha);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3d(100, -7, 100);     glTexCoord2f(0, 0);
    glVertex3d(100, -7, -100);    glTexCoord2f(0, 100);
    glVertex3d(-100, -7, -100);   glTexCoord2f(100, 100);
    glVertex3d(-100, -7, 100);    glTexCoord2f(100, 0);
    glEnd();
    glDisable(GL_TEXTURE_2D);


}
// ham tai su dung
// ham ve duong tron fill mau
void DrawCircle(float cx, float cy, float r, int num_segments, float cphx, float cphy, float cphz) {
    glBegin(GL_POLYGON);
    glNormal3f(cphx, cphy, cphz);
    for (int ii = 0; ii < num_segments; ii++) {
        float theta = 2.0f * 3.1415926f * float(ii) / float(num_segments);//get the current angle 
        float x = r * cosf(theta);//calculate the x component 
        float y = r * sinf(theta);//calculate the y component 
        glVertex2f(x + cx, y + cy);//output vertex 
    }
    glEnd();
}


// vẽ hình chữ nhật 
// h: độ rộng theo trục x
// w: chiều cao y
// size : tăng nhanh kích thước trục x
void cubefill(float h, float w, float size) {
    glBegin(GL_QUADS);
    // x
    glNormal3f(0, 0, 1.0);
    glVertex3f(-1.0 * h * size, 0.0, 1.0 * h);
    glVertex3f(1.0 * h * size, 0.0, 1.0 * h);
    glVertex3f(1.0 * h * size, 1.0 * w, 1.0 * h);
    glVertex3f(-1.0 * h * size, 1.0 * w, 1.0 * h);
    // duoi
    glNormal3f(0, 0, -1.0);
    glVertex3f(-1.0 * h * size, 0.0, -1.0 * h);
    glVertex3f(1.0 * h * size, 0.0, -1.0 * h);
    glVertex3f(1.0 * h * size, 1.0 * w, -1.0 * h);
    glVertex3f(-1.0 * h * size, 1.0 * w, -1.0 * h);
    // y
    glNormal3f(-1.0, 0.0, 0);
    glVertex3f(-1.0 * h * size, 0.0, -1.0 * h);
    glVertex3f(-1.0 * h * size, 1.0 * w, -1.0 * h);
    glVertex3f(-1.0 * h * size, 1.0 * w, 1.0 * h);
    glVertex3f(-1.0 * h * size, 0.0, 1.0 * h);
    //mat phai yz
    glNormal3f(1.0, 0.0, 0);
    glVertex3f(1.0 * h * size, 0.0, 1.0 * h);
    glVertex3f(1.0 * h * size, 0.0, -1.0 * h);
    glVertex3f(1.0 * h * size, 1.0 * w, -1.0 * h);
    glVertex3f(1.0 * h * size, 1.0 * w, 1.0 * h);
    // z
    glNormal3f(0, -1.0, 0.0);
    glVertex3f(1.0 * h * size, 0.0, 1.0 * h);
    glVertex3f(1.0 * h * size, 0.0, -1.0 * h);
    glVertex3f(-1.0 * h * size, 0.0, -1.0 * h);
    glVertex3f(-1.0 * h * size, 0.0, 1.0 * h);
    // mat tren zx
    glNormal3f(0, 1.0, 0.0);
    glVertex3f(1.0 * h * size, 1.0 * w, 1.0 * h);
    glVertex3f(1.0 * h * size, 1.0 * w, -1.0 * h);
    glVertex3f(-1.0 * h * size, 1.0 * w, -1.0 * h);
    glVertex3f(-1.0 * h * size, 1.0 * w, 1.0 * h);
    glEnd();
}

void capTren() {

    glBegin(GL_POLYGON);
    /*glVertex3f(0, 6, 0-0.01);
    glVertex3f(0.25, 7, 0 - 0.01);*/
    glColor3f(1, 1, 0);
    glVertex3f(0.5, 8, 0 - 0.01);
    glVertex3f(0.95, 9, 0 - 0.01);
    glVertex3f(1.5, 9.5, 0 - 0.01);
    glVertex3f(2.5, 9.5, 0 - 0.01);
    glVertex3f(2.5, 7.5, 0 - 0.01);
    glEnd();

    glColor3f(1, 1, 1);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0, 6, 0);     glTexCoord2d(0, 0);
    glVertex3f(0, 6, 2);     glTexCoord2d(1, 0);
    glVertex3f(0.25, 7, 2);  glTexCoord2d(1, 1);
    glVertex3f(0.25, 7, 0);  glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0.25, 7, 2);  glTexCoord2d(0, 0);
    glVertex3f(0.25, 7, 0);  glTexCoord2d(1, 0);
    glVertex3f(0.5, 8, 0);   glTexCoord2d(1, 1);
    glVertex3f(0.5, 8, 2);   glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0.5, 8, 2);   glTexCoord2d(0, 0);
    glVertex3f(0.5, 8, 0);   glTexCoord2d(1, 0);
    glVertex3f(0.95, 9, 0);  glTexCoord2d(1, 1);
    glVertex3f(0.95, 9, 2);  glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0.95, 9, 0);  glTexCoord2d(0, 0);
    glVertex3f(0.95, 9, 2);  glTexCoord2d(1, 0);
    glVertex3f(1.5, 9.5, 2); glTexCoord2d(1, 1);
    glVertex3f(1.5, 9.5, 0); glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(1.5, 9.5, 2);     glTexCoord2d(0, 0);
    glVertex3f(1.5, 9.5, 0);     glTexCoord2d(1, 0);
    glVertex3f(2.5, 9.5, 0);     glTexCoord2d(1, 1);
    glVertex3f(2.5, 9.5, 2);     glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glBegin(GL_POLYGON);
    glVertex3f(0, 6, 2);
    glVertex3f(0.25, 7, 2);
    glVertex3f(0.5, 8, 2);
    glVertex3f(0.95, 9, 2);
    glVertex3f(1.5, 9.5, 2);
    glVertex3f(2.5, 9.5, 2);
    glVertex3f(2.5, 6, 2);
    glEnd();

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_POLYGON);
    glVertex3f(0, 6, 0);        glTexCoord2d(0, 0);
    glVertex3f(0.25, 7, 0);     glTexCoord2d(0.5, 0);
    glVertex3f(0.5, 8, 0);      glTexCoord2d(0.5, 1);
    glVertex3f(0.95, 9, 0);     glTexCoord2d(0, 1);
    glVertex3f(1.5, 9.5, 0);
    glVertex3f(2.5, 9.5, 0);
    glVertex3f(2.5, 6, 0);
    glEnd();
    glDisable(GL_TEXTURE_2D);
    // haizzz cap 1
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, khoacap);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 1, 0.85);
    glVertex3f(1.5, 9.5, 2); glTexCoord2d(0, 0);
    glVertex3f(1.5, 8, 2.5); glTexCoord2d(0.5, 0);
    glVertex3f(2.5, 8, 2.5); glTexCoord2d(0.5, 1);
    glVertex3f(2.5, 9.5, 2); glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);
    // cap diem 2

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, logotruoc);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(1, 1, 0.9);
    glVertex3f(0.95, 8, 2.5);       glTexCoord2d(0, 0);
    glVertex3f(0.95, 0.25, 2.5);    glTexCoord2d(0.3, 0);
    glVertex3f(2.5, 0.25, 2.5);     glTexCoord2d(0.3, 1);
    glVertex3f(2.5, 8, 2.5);        glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, logotruoc);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(1, 1, 0.9);
    glVertex3f(0.95, 8, 2.51);          glTexCoord2d(0, 0);
    glVertex3f(0.95, 5.5, 2.51);        glTexCoord2d(0.5, 0);
    glVertex3f(2.5, 5.5, 2.51);         glTexCoord2d(0.5, 1);
    glVertex3f(2.5, 8, 2.51);           glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, khoa2);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 1, 0.83);
    glVertex3f(0.95, 9, 2);      glTexCoord2d(0, 0);
    glVertex3f(0.95, 8, 2.5);    glTexCoord2d(1, 0);
    glVertex3f(1.5, 8, 2.5);     glTexCoord2d(1, 1);
    glVertex3f(1.5, 9.5, 2);     glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    // cap diem 3
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 1, 0.9);
    glVertex3f(0.95, 8, 2.5);    glTexCoord2d(0, 0);
    glVertex3f(0.95, 0.25, 2.5); glTexCoord2d(1, 0);
    glVertex3f(0.5, 0.25, 2.5);  glTexCoord2d(1, 1);
    glVertex3f(0.5, 7, 2.5);     glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D); 

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, khoa1);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 1, 0.81);
    glVertex3f(0.5, 8, 2);          glTexCoord2d(0, 0);
    glVertex3f(0.5, 7, 2.5);        glTexCoord2d(1, 0);
    glVertex3f(0.95, 8, 2.5);       glTexCoord2d(1, 1);
    glVertex3f(0.95, 9, 2);         glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    // cap diem 4
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 1, 0.9);
    glVertex3f(0.5, 0.25, 2.5);     glTexCoord2d(0, 0);
    glVertex3f(0.25, 0.25, 2.5);    glTexCoord2d(1, 0);
    glVertex3f(0.25, 6, 2.5);       glTexCoord2d(1, 1);
    glVertex3f(0.5, 7, 2.5);        glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, khoa1);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(1, 1, 0.79);
    glVertex3f(0.25, 7, 2);      glTexCoord2d(0, 0);
    glVertex3f(0.25, 6, 2.5);    glTexCoord2d(1, 0);
    glVertex3f(0.5, 7, 2.5);     glTexCoord2d(1, 1);
    glVertex3f(0.5, 8, 2);       glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 1, 0.9);
    glVertex3f(0, 5, 2.5);           glTexCoord2d(0, 0);
    glVertex3f(0.25, 6, 2.5);        glTexCoord2d(1, 0);
    glVertex3f(0.25, 0.25, 2.5);     glTexCoord2d(1, 1);
    glVertex3f(0, 0.25, 2.5);        glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, khoa1);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 1, 0.77);
    glVertex3f(0.25, 7, 2);     glTexCoord2d(0, 0);
    glVertex3f(0.25, 6, 2.5);   glTexCoord2d(1, 0);
    glVertex3f(0, 5, 2.5);      glTexCoord2d(1, 1);
    glVertex3f(0, 6, 2);        glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctrai);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    //glColor3f(0, 1, 0.9);
    glVertex3f(0, 6, 2);        glTexCoord2d(0, 0);
    glVertex3f(0, 5, 2.5);      glTexCoord2d(1, 0);
    glVertex3f(0, 0.25, 2.5);   glTexCoord2d(1, 1);
    glVertex3f(0, 0.0, 2);      glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 1, 0.7);
    glVertex3f(0, 0.25, 2.5);            glTexCoord2d(0, 0);
    glVertex3f(0, 0.0, 2);               glTexCoord2d(1, 0);
    glVertex3f(2.5, 0.0, 2);             glTexCoord2d(1, 1);
    glVertex3f(2.5, 0.25, 2.5);          glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);
    // tay xach
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(2.25, 9.5, 0.25);     glTexCoord2d(0, 0);
    glVertex3f(2.25, 10, 0.0);       glTexCoord2d(1, 0);
    glVertex3f(2, 10, 0.25);         glTexCoord2d(1, 1);
    glVertex3f(2, 9.5, 0.25);        glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0.3, 0, 1);
    glVertex3f(2.25, 10, 0.0);      glTexCoord2d(0, 0);
    glVertex3f(2.3, 10.25, 0.0);    glTexCoord2d(1, 0);
    glVertex3f(2.3, 10.25, 0.25);   glTexCoord2d(1, 1);
    glVertex3f(2, 10, 0.25);        glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0.5, 0, 1);
    glVertex3f(2.3, 10.25, 0.0);        glTexCoord2d(0, 0);
    glVertex3f(2.5, 10.25, 0.0);        glTexCoord2d(1, 0);
    glVertex3f(2.5, 10.25, 0.25);       glTexCoord2d(1, 1);
    glVertex3f(2.3, 10.25, 0.25);       glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);
    //
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(2.25, 0, 2);     glTexCoord2d(0, 0);
    glVertex3f(2.25, 0, 2.25);  glTexCoord2d(1, 0);     // max 3z
    glVertex3f(2, 0, 2.55);     glTexCoord2d(1, 1);
    glVertex3f(2, 0, 2);        glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0.2, 0, 1);
    glVertex3f(2.25, 0, 2.25);          glTexCoord2d(0, 0);// max 3z
    glVertex3f(2.3, 0.25, 2.75);        glTexCoord2d(1, 0);
    glVertex3f(2.10, 0, 2.75);          glTexCoord2d(1, 1);
    glVertex3f(2, 0, 2.55);             glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0.3, 0, 1);
    glVertex3f(2.3, 0.25, 2.75);    glTexCoord2d(0, 0);
    glVertex3f(2.35, 0.25, 3);      glTexCoord2d(1, 0);        // max 3z
    glVertex3f(2.3, 0, 3);          glTexCoord2d(1, 1);
    glVertex3f(2.10, 0, 2.75);      glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glColor3f(0.4, 0, 1);
    glVertex3f(2.35, 0.25, 3); glTexCoord2d(0, 0);
    glVertex3f(2.5, 0.25, 3); glTexCoord2d(1, 0);
    glVertex3f(2.5, 0, 3);    glTexCoord2d(1, 1);
    glVertex3f(2.3, 0, 3);    glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);
    // quai cap
    
    glBegin(GL_POLYGON);
        glColor3f(1, 1, 0);
    glVertex3f(0.5, 8, 0 - 0.01);
    glVertex3f(0.95, 9, 0 - 0.01);
    glVertex3f(1.5, 9.5, 0 - 0.01);
    glVertex3f(2.5, 9.5, 0 - 0.01);
    glVertex3f(2.5, 7.5, 0 - 0.01);
    glEnd();

    glColor3f(0, 0, 0.0);
    glBegin(GL_QUADS);
    //glColor3f(0, 1, 0.9);
    glVertex3f(0 - 0.01, 1.25, 2.51);
    glVertex3f(2.5, 1.25, 2.51);
    glVertex3f(2.5, 0.25, 2.51);
    glVertex3f(0.0 - 0.01, 0.25, 2.51);
    glEnd();

    glBegin(GL_QUADS);

    glVertex3f(0 - 0.01, 1.25, 2);
    glVertex3f(0 - 0.01, 1.25, 2.51);
    glVertex3f(0 - 0.01, 0.251, 2.51);
    glVertex3f(0 - 0.01, 0 - 0.01, 2);

    glBegin(GL_QUADS);
    glColor3f(0, 0, 0.0);
    glVertex3f(0 - 0.01, 0.25, 2.5);
    glVertex3f(0 - 0.01, 0.0, 2);
    glVertex3f(2.51, 0.0, 2);
    glVertex3f(2.51, 0.25, 2.5);
    glEnd();
}
void capNho() {
    //cap nho
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0.5, 1.25, 2.5);  glTexCoord2d(0, 0);
    glVertex3f(0.5, 1.25, 3);    glTexCoord2d(1, 0);
    glVertex3f(0.5, 4.25, 3);    glTexCoord2d(1, 1);
    glVertex3f(0.5, 4.25, 2.5);  glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(4.5, 1.25, 2.5); glTexCoord2d(0, 0);
    glVertex3f(4.5, 1.25, 3);   glTexCoord2d(1, 0);
    glVertex3f(4.5, 4.25, 3);   glTexCoord2d(1, 1);
    glVertex3f(4.5, 4.25, 2.5); glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0.5, 4.25, 2.5); glTexCoord2d(0, 0);
    glVertex3f(0.5, 4.25, 3);   glTexCoord2d(1, 0);
    glVertex3f(4.5, 4.25, 3);   glTexCoord2d(1, 1);
    glVertex3f(4.5, 4.25, 2.5); glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0.5, 1.25, 2.5);     glTexCoord2d(0, 0);
    glVertex3f(0.5, 1.25, 3);       glTexCoord2d(1, 0);
    glVertex3f(4.5, 1.25, 3);       glTexCoord2d(1, 1);
    glVertex3f(4.5, 1.25, 2.5);     glTexCoord2d(0, 1);
    glEnd(); 
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoc);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);

    glBegin(GL_QUADS);
    glVertex3f(0.5, 4.25, 3);   glTexCoord2d(0, 0);
    glVertex3f(0.5, 1.25, 3);   glTexCoord2d(1, 0);
    glVertex3f(4.5, 1.25, 3);   glTexCoord2d(1, 1);
    glVertex3f(4.5, 4.25, 3);   glTexCoord2d(0, 1);

    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoc);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);

    glBegin(GL_QUADS);
    glVertex3f(0.5, 4.25, 2.5);      glTexCoord2d(0, 0);
    glVertex3f(0.5, 1.25, 2.5);      glTexCoord2d(1, 0);
    glVertex3f(4.5, 1.25, 2.5);      glTexCoord2d(1, 1);
    glVertex3f(4.5, 4.25, 2.5);      glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

}
void ThanCap() {
    glBegin(GL_QUADS);
    glNormal3f(0, -1, 0);
    glColor3f(4, 2, 0.4);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0, 0, 2); glTexCoord2d(0, 0);
    glVertex3f(5, 0, 2); glTexCoord2d(1, 0);// ve diem x y z 
    glVertex3f(5, 0, 0); glTexCoord2d(1, 1);
    glVertex3f(0, 0, 0); glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(0, 0, 0); glTexCoord2d(0, 0);
    glVertex3f(0, 0, 2); glTexCoord2d(1, 0);
    glVertex3f(0, 6, 2); glTexCoord2d(1, 1);
    glVertex3f(0, 6, 0); glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glBegin(GL_QUADS);
    glColor3f(0, 0, 0);
    glVertex3f(0 - 0.01, 0, 0);
    glVertex3f(0 - 0.01, 0, 2);
    glVertex3f(0 - 0.01, 1.25, 2);
    glVertex3f(0 - 0.01, 1.25, 0);

    glVertex3f(5.01, 0, 2);
    glVertex3f(5.01, 0, 0 - 0.01);
    glVertex3f(5.01, 1.25, 0 - 0.01);
    glVertex3f(5.01, 1.25, 2);

    glVertex3f(5 + 0.01, 0, 0 - 0.01);
    glVertex3f(5 + 0.01, 1.25, 0 - 0.01);
    glVertex3f(0 - 0.01, 1.25, 0 - 0.01);
    glVertex3f(0 - 0.01, 0, 0 - 0.01);
    glEnd();

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mattruoctren);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(5, 0, 2); glTexCoord2d(0, 0);
    glVertex3f(5, 0, 0); glTexCoord2d(1, 0);
    glVertex3f(5, 6, 0); glTexCoord2d(1, 1);
    glVertex3f(5, 6, 2); glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, mauden);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
    glBegin(GL_QUADS);
    glVertex3f(5, 0, 0); glTexCoord2d(0, 0);
    glVertex3f(5, 6, 0); glTexCoord2d(1, 0);
    glVertex3f(0, 6, 0); glTexCoord2d(1, 1);
    glVertex3f(0, 0, 0); glTexCoord2d(0, 1);
    glEnd();
    glDisable(GL_TEXTURE_2D);

    glVertex3f(0, 0, 2);
    glVertex3f(5, 0, 2);
    glVertex3f(5, 6, 2);
    glVertex3f(0, 6, 2);
    glEnd();
}
void veCapSach() {
    glPushMatrix();
    glTranslatef(2.5, 0, 0);
    glRotatef((GLfloat)spin, 0, 1, 0);
    glTranslatef(-2.5, 0, 0);
    glColor3f(0.4, 0, 1); // r g b
    glPushMatrix();
    ThanCap();
    glPopMatrix();

    glColor3f(0, 1, 0); // r g b
    glPushMatrix();
    capTren();
    veQuaicap();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(2.5, 0, 0);
    glScalef(-1, 1, 1);
    glTranslatef(-2.5, 0, 0);
    capTren();
    veQuaicap();
    glPopMatrix();

    glPushMatrix();
    capNho();
    glPopMatrix();

    glPushMatrix();
    veCaiban();
    glPopMatrix();
    glPopMatrix();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glEnable(GL_NORMALIZE);


    for (int i = 0; i < 2; i++) {
        if (i == 0) {
            glShadeModel(GL_FLAT);
        }
        else {
            glShadeModel(GL_SMOOTH);
        }
    }

    // camera hover
    glTranslatef(viewerPosition[0], viewerPosition[1], viewerPosition[2]);
    glRotatef(navigationRotation[0], 1.0f, 0.0f, 0.0f);
    glRotatef(navigationRotation[1], 0.0f, 1.0f, 0.0f);
    DrawCoordinate();
    glPushMatrix();
    veCapSach();
    glPopMatrix();
  
    glLoadIdentity();
    gluLookAt(camx, camy, camz, camx, 1.0, 0.0, 0.0, 1.0, 1.0);
    glutSwapBuffers();
    glFlush();
}

void reShape(int w, int h)
{
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60.0, (GLfloat)w / (GLfloat)h, 0.1, 300.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(camx, camy, camz, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0);
}

void mouseMotionFunc(int x, int y) {

    float xOffset = 0.0, yOffset = 0.0, zOffset = 0.0;

    // navigation
    // if (altActive) {

    // rotatation
    if (leftMouseButtonActive) {

        navigationRotation[0] -= ((mousePressedY - y) * 180.0f) / 200.0f;
        navigationRotation[1] -= ((mousePressedX - x) * 180.0f) / 200.0f;

        mousePressedY = y;
        mousePressedX = x;

    }
    // panning
    else if (middleMouseButtonActive) {

        xOffset = (mousePressedX + x);
        if (!lastXOffset == 0.0) {
            viewerPosition[0] -= (xOffset - lastXOffset) / 8.0;
            viewerDirection[0] -= (xOffset - lastXOffset) / 8.0;
        }
        lastXOffset = xOffset;

        yOffset = (mousePressedY + y);
        if (!lastYOffset == 0.0) {
            viewerPosition[1] += (yOffset - lastYOffset) / 8.0;
            viewerDirection[1] += (yOffset - lastYOffset) / 8.0;
        }
        lastYOffset = yOffset;

    }
    // depth movement
    else if (rightMouseButtonActive) {
        zOffset = (mousePressedX + x);
        if (!lastZOffset == 0.0) {
            viewerPosition[2] -= (zOffset - lastZOffset) / 5.0;
            viewerDirection[2] -= (zOffset - lastZOffset) / 5.0;
        }
        lastZOffset = zOffset;
    }
    // }
}

/* các thao tác xử lý chuột */
void mouse(int button, int state, int x, int y)
{


    // get the mouse buttons
    if (button == GLUT_LEFT_BUTTON)
        if (state == GLUT_DOWN) {
            leftMouseButtonActive += 1;
        }
        else
            leftMouseButtonActive -= 1;
    else if (button == GLUT_MIDDLE_BUTTON)
        if (state == GLUT_DOWN) {
            middleMouseButtonActive += 1;
            lastXOffset = 0.0;
            lastYOffset = 0.0;
        }
        else
            middleMouseButtonActive -= 1;
    else if (button == GLUT_RIGHT_BUTTON)
        if (state == GLUT_DOWN) {
            rightMouseButtonActive += 1;
            lastZOffset = 0.0;
        }
        else
            rightMouseButtonActive -= 1;
    // if (altActive) {
    mousePressedX = x;
    mousePressedY = y;
    // }

}
void spinDisplay(void)
{
    spin = spin + 1.0; /* xoay thêm 2 deg cho mỗi lần lặp */
    if (spin > 360.0)
        spin = spin - 360.0;
    glutPostRedisplay(); /* thông báo cho chương trình rằng: cần phải thực
    hiện việc vẽ lại */
}
int flag = 0;
void updateScene() {
    if (flag == 0) {
        spin = spin + 0.05; /* xoay thêm 2 deg cho mỗi lần lặp */
        if (spin > 360.0)
            spin = spin - 360.0;
    }
    else { int lol = spin; spin = lol; }
}
// key event
void key(unsigned char key, int x, int y) {
    switch (key) {
    case 27:
        exit(0);
        break;
    case 'G': 
    case 'g':
        if (flag == 0) flag = 1; else flag = 0;
        cout << "spin" << spin << "flag" << flag << endl;
        break;
    case 'V':
    case 'v':

        break;
    case 'R':
    case 'r':

        break;
    case 'W':
    case 'w':
        //key up

        break;
    case 'S':
    case 's':
        // key down

        break;
    case 'A':
    case 'a':

        break;
    case 'D':
    case 'd':
        // HANDLE_LIMIT = 30 đây là giới hạn góc quay nếu mà lớn hơn thì đưa về cái giới hạn chuẩn của nó

        break;
    }

}


// hàm hoạt động khi không có hoạt động nào xảy ra
// hàm hoạt động khi không có hoạt động nào xảy ra
void idleFunc(void) {
    updateScene();
    glutPostRedisplay();
}
int main(int argc, char* argv[]) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(1366, 768);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Opengl Study");
    init();
    glutReshapeFunc(reShape);
    //glutDisplayFunc(rendenScene);
    glutDisplayFunc(display);
    //glutSpecialFunc(special);
    glutMouseFunc(mouse); /* đăng ký hàm mouse cho sự kiện về chuột */
    glutMotionFunc(mouseMotionFunc);
    glutIdleFunc(idleFunc);
    glutKeyboardFunc(key);

    glutSetCursor(GLUT_CURSOR_CROSSHAIR);
    glutMainLoop();
    return 0;
}